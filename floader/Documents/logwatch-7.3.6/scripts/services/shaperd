
##########################################################################
# $Id: shaperd,v 1.4 2005/02/24 17:08:05 kirk Exp $
##########################################################################
# $Log: shaperd,v $
# Revision 1.4  2005/02/24 17:08:05  kirk
# Applying consolidated patches from Mike Tremaine
#
# Revision 1.4  2005/02/16 00:43:28  mgt
# Added #vi tag to everything, updated ignore.conf with comments, added emerge and netopia to the tree from Laurent -mgt
#
# Revision 1.3  2004/07/29 19:33:29  mgt
# Chmod and removed perl call -mgt
#
# Revision 1.2  2004/07/10 01:54:36  mgt
# sync with kirk -mgt
#
# Revision 1.1  2004/02/03 02:45:26  kirk
# Tons of patches, and new 'oidentd' and 'shaperd' filters from
# Pawe? Go?aszewski" <blues@ds.pg.gda.pl>
#
# Revision 1.3  2004/01/17 23:04:13  blues
# - ignored some entries
#
# Revision 1.2  2004/01/06 10:57:33  blues
# - delay decreating message
#
# Revision 1.1  2003/12/25 20:07:15  blues
# - shaperd support for logwatch
#
##########################################################################

########################################################
# This was written and is maintained by:
#    Pawe³ Go³aszewski <blues@pld-linux.org>
#
# Please send all comments, suggestions, bug reports,
#    etc, to kirk@kaybee.org and blues@pld-linux.org
########################################################

## Initial initialization:
$DelayIncCount = 0;
$DelayDecCount = 0;
$MaxDelay = 0;
$MinDelay = 0;
$TooOldSoft = 0;

while (defined($ThisLine = <STDIN>)) {
   chomp($ThisLine);
   if (
      ($ThisLine =~ m/^upload ip: /) or
      ($ThisLine =~ m/^download ip: /) or
      ($ThisLine =~ m/^Delay parameter has too low amount for this number of IP's or possibility of server.$/) or
      ($ThisLine =~ m/^Dlay parameter has too high amount./) or
      ($ThisLine =~ m/^starting: LAN Traffic shaper/) or
      ($ThisLine =~ m/^using IP [^ ]* for [^ ]* (local|internet) interface/) or
      ($ThisLine =~ m/^running, PID=/) or
      ($ThisLine =~ m/^divide_upload active/) or
      ($ThisLine =~ m/^Normal termination./) or
      ($ThisLine =~ m/^Initialisation finished/) or
      ($ThisLine =~ m/^HTB3 found - quantum option enabled./) or
      ($ThisLine =~ m/^HTB Upload Class type activated/) or
      ($ThisLine =~ m/^HTB Download Class type activated/) or
      ($ThisLine =~ m/^Continuous traffic control enabled/)
   ) {
      #ignore these
   } elsif ( ($Direction,$Ip) = ($ThisLine =~ /^Can't control ([^ ]*) bandwidth of IP ([^ ]*)$/)) {
      $BandwidthControl{$Direction}{$Ip}++;
   } elsif ( ($Direction,$Ip) = ( $ThisLine =~ /^Removing ([^ ]*) class of IP ([^ ]*)$/ ) ) {
      $RemovingClass{$Direction}{$Ip}++;
   } elsif ( ($Delay) = ( $ThisLine =~ /^Increasing delay to ([0-9]*) seconds$/) ) {
      $IncreasingDelay{$Delay}++;
      $DelayIncCount++;
   } elsif ( ($Delay) = ( $ThisLine =~ /^Decreasing delay to ([0-9]*) seconds$/) ) {
      $DecreasingDelay{$Delay}++;
      $DelayDecCount++;
   } elsif ( $ThisLine =~ m/^It seems that iproute2 did'nt work correctly. Please upgrade your iproute2 and\/or kernel./) {
      $TooOldSoft++;
   } else {
      $OtherList{$ThisLine}++;
   }
}

###########################
# Print report:

if ($TooOldSoft > 0) {
   print "\nWarning:\n";
   print "Too old or broken iproute2/kernel reported $TooOldSoft Time(s)\n";
}

if (keys %IncreasingDelay) {
   foreach $Delay (keys %IncreasingDelay) {
      if ($Delay > $MaxDelay) {
         $MaxDelay = $Delay;
      }
   }
   print "\nDelay increased $DelayIncCount Time(s) up to $MaxDelay seconds.\n";
}

if (keys %DecreasingDelay) {
   foreach $Delay (keys %DecreasingDelay) {
      if ($Delay < $MinDelay) {
         $MinDelay = $Delay;
      }
   }
   print "\nDelay decreased $DelayDecCount Time(s) to $MinDelay seconds.\n";
}

if (keys %BandwidthControl) {
   print "\nCan't control bandwidth:\n";
   foreach $Direction (sort {$a cmp $b} keys %BandwidthControl) {
      print "   $Direction:\n";
      foreach $Ip (sort {$a cmp $b} keys %{$BandwidthControl{$Direction}}) {
         print "      $Ip : $BandwidthControl{$Direction}{$Ip} Time(s)\n";
      }
   }
}

if (keys %RemovingClass) {
   print "\nRemoving class for:\n";
   foreach $Direction (sort {$a cmp $b} keys %RemovingClass) {
      print "   $Direction:\n";
      foreach $Ip (sort {$a cmp $b} keys %{$RemovingClass{$Direction}}) {
         print "      $Ip : $RemovingClass{$Direction}{$Ip} Time(s)\n";
      }
   }
}

if (keys %OtherList) {
   print "\n**Unmatched Entries**\n";
   foreach $line (sort {$a cmp $b} keys %OtherList) {
      print "$line: $OtherList{$line} Time(s)\n";
   }
}

exit(0);

# vi: shiftwidth=3 tabstop=3 syntax=perl et

