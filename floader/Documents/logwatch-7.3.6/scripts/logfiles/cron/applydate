
#use strict;
##########################################################################
# $Id: applydate,v 1.15 2007/01/14 17:05:22 mike Exp $
##########################################################################

########################################################
# This was written and is maintained by:
#    Kirk Bauer <kirk@kaybee.org>
#
# Please send all comments, suggestions, bug reports,
#    etc, to logwatch-devel@logwatch.org
########################################################

use POSIX qw(strftime);
use Logwatch ':dates';

my $Debug = $ENV{'LOGWATCH_DEBUG'} || 0;


# SearchDate2 is for newer crond (i.e. RH7.X)
my ($SearchDate, $SearchDate2, $ThisLine);
my ($incount, $outcount) = (0, 0);
my $time = time;
my $hostname = $ENV{'HOSTNAME'};
my $OSname = $ENV{'OSname'};

$SearchDate = TimeFilter("%m/%d-%H:%M:%S");
$SearchDate2 = TimeFilter("%b %e %H:%M:%S");

if ($Debug > 5) {
   print STDERR "DEBUG: Inside ApplyDate (cron)...\n";
   print STDERR "DEBUG: Looking For: $SearchDate or $SearchDate2\n";
}

while (defined($ThisLine = <STDIN>)) {
   $incount++;
   #Solaris & IRIX CRON filter -mgt
   #Basically takes the cron format in /var/cron/log and makes it look like syslog
   if ( $OSname =~ /(SunOS|IRIX)/ ) {
      if ($ThisLine =~ m/^\>\s+CMD: (.+)$/o) {
         my $command = $1;
         my $nextline = <STDIN>;
         my ($user, $ps, $datestamp) = $nextline =~ /^\>\s+(\w+) (\d+) . \w\w\w (\w\w\w\s+\d+ \d\d:\d\d:\d\d)/;
         $ThisLine = "$datestamp $hostname CROND[$ps]: ($user) CMD ($command)\n";
      }
   }
   if ($ThisLine =~ m/^[^ ]+ \($SearchDate-[0123456789]+\) /o) {
      print $ThisLine;
      $outcount++;
   } elsif ($ThisLine =~ m/^$SearchDate2 [^ ]+ [\w\/]+\[\d+\]:/o) {
      print $ThisLine;
      $outcount++;
   }
}

if ($Debug > 5) {
   print STDERR "DEBUG: ApplyDate (cron): $incount Lines In, $outcount Lines Out\n";
}

# vi: shiftwidth=3 tabstop=3 syntax=perl et
